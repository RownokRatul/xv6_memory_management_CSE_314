diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..eca6bc5
Binary files /dev/null and b/.DS_Store differ
diff --git a/Makefile b/Makefile
index 39a99d7..8526bf8 100644
--- a/Makefile
+++ b/Makefile
@@ -128,6 +128,7 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_test1\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
diff --git a/kernel/defs.h b/kernel/defs.h
old mode 100644
new mode 100755
index a3c962b..2c4d008
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,9 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             dec_kmemref(void*);
+int             inc_kmemref(void*);
+void            print_free_pages(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +109,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            print_kmemref(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
old mode 100644
new mode 100755
index 0699e7e..e476163
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -14,6 +14,10 @@ void freerange(void *pa_start, void *pa_end);
 extern char end[]; // first address after kernel.
                    // defined by kernel.ld.
 
+// memory reference counter
+// int kmemref[(PHYSTOP-KERNBASE)/PGSIZE];
+int kmemref[PHYSTOP/PGSIZE];
+
 struct run {
   struct run *next;
 };
@@ -27,7 +31,15 @@ void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  // initialize kmem reference array
+  acquire(&kmem.lock);
+  for(int i = 0; i < (PHYSTOP/PGSIZE); i++) {
+      kmemref[i] = 1;
+  }
+  release(&kmem.lock);
+  // printf("going to free\n");`
   freerange(end, (void*)PHYSTOP);
+  // printf("freeing done\n");
 }
 
 void
@@ -35,8 +47,11 @@ freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  // printf("%d\n", (uint64)p);
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE) {
+    // printf("free range: kfree\n");
     kfree(p);
+  }
 }
 
 // Free the page of physical memory pointed at by pa,
@@ -46,20 +61,22 @@ freerange(void *pa_start, void *pa_end)
 void
 kfree(void *pa)
 {
-  struct run *r;
+  // struct run *r;
 
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
   // Fill with junk to catch dangling refs.
-  memset(pa, 1, PGSIZE);
-
-  r = (struct run*)pa;
-
-  acquire(&kmem.lock);
-  r->next = kmem.freelist;
-  kmem.freelist = r;
-  release(&kmem.lock);
+  // memset(pa, 1, PGSIZE);
+  
+  // r = (struct run*)pa;
+  if(dec_kmemref(pa) != 0) {
+    // printf("Trying to free a deallocated memory\n");
+  }
+  // acquire(&kmem.lock);
+  // r->next = kmem.freelist;
+  // kmem.freelist = r;
+  // release(&kmem.lock);
 }
 
 // Allocate one 4096-byte page of physical memory.
@@ -76,7 +93,61 @@ kalloc(void)
     kmem.freelist = r->next;
   release(&kmem.lock);
 
-  if(r)
+  if(r) {
     memset((char*)r, 5, PGSIZE); // fill with junk
+    inc_kmemref(r);
+  }
   return (void*)r;
 }
+
+int dec_kmemref(void* pa) {
+  struct run *r;
+  // uint64 idx = ((uint64)pa-KERNBASE)/PGSIZE;
+  uint64 idx = ((uint64)pa)/PGSIZE;
+  // printf("%d %d: %d\n",(PHYSTOP-KERNBASE)/PGSIZE, idx, kmemref[idx]);
+  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP) {
+    panic("dec_kmemref");
+  }
+  acquire(&kmem.lock);
+  if(kmemref[idx] <= 0) {
+    // printf("%d %d: %d\n",(PHYSTOP-KERNBASE)/PGSIZE, idx, kmemref[idx]);
+    release(&kmem.lock);
+    return -1;
+  }
+  kmemref[idx]--;
+  // printf("%d %d: %d\n",(PHYSTOP-KERNBASE)/PGSIZE, idx, kmemref[idx]);
+  if(kmemref[idx] == 0) {
+    // printf("%d %d: %d\n",(PHYSTOP-KERNBASE)/PGSIZE, idx, kmemref[idx]);
+    // garbage fill memory
+    memset((void*)pa, 1, PGSIZE);
+    r = (struct run*)pa;
+    r->next = kmem.freelist;
+    kmem.freelist = r;
+  }
+  release(&kmem.lock);
+  return 0;
+}
+
+int inc_kmemref(void* pa) {
+  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP) {
+    panic("inc_kmemref");
+  }
+  acquire(&kmem.lock);
+  // kmemref[(uint64)(pa-KERNBASE)/PGSIZE]++;
+  kmemref[(uint64)(pa)/PGSIZE]++;
+  release(&kmem.lock);
+  return 0;
+}
+
+void
+print_free_pages(void) {
+  acquire(&kmem.lock);
+  int count = 0;
+  for(int i = 0; i < PHYSTOP/PGSIZE; i++) {
+    if(kmemref[i] == 0) {
+      count ++;
+    }
+  }
+  release(&kmem.lock);
+  printf("Free Page Count: %d\n", count);
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..9600599 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -17,6 +17,7 @@ struct spinlock pid_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
+extern int kmemref[];
 
 extern char trampoline[]; // trampoline.S
 
@@ -681,3 +682,17 @@ procdump(void)
     printf("\n");
   }
 }
+
+void 
+print_kmemref(void) {
+  struct proc *p;
+  printf("pid\tPage_count\n");
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if(p->state != UNUSED) {
+      printf("%d\t%d\n", p->pid, p->sz/PGSIZE);
+    }
+    release(&p->lock);
+  }
+  print_free_pages();
+}
diff --git a/kernel/riscv.h b/kernel/riscv.h
old mode 100644
new mode 100755
index 20a01db..ba836cb
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_RSW0 (1L << 8) // PTE COW marker0
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..c4dbe04 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_print_cow_pages(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_print_cow_pages] sys_print_cow_pages,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..3858a44 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_print_cow_pages 22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..8375a6c 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,9 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_print_cow_pages(void) {
+  print_kmemref();
+  return 0;
+}
diff --git a/kernel/trap.c b/kernel/trap.c
old mode 100644
new mode 100755
index 512c850..28fa17b
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -6,9 +6,14 @@
 #include "proc.h"
 #include "defs.h"
 
+#define RW_PAGE_FAULT 15
+#define LD_PAGE_FAULT 13
+
 struct spinlock tickslock;
 uint ticks;
 
+extern char end[];
+
 extern char trampoline[], uservec[], userret[];
 
 // in kernelvec.S, calls kerneltrap().
@@ -16,6 +21,9 @@ void kernelvec();
 
 extern int devintr();
 
+// kernel page table to use in kerneltrap
+// extern pagetable_t kernel_pagetable;
+
 void
 trapinit(void)
 {
@@ -65,6 +73,42 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if((r_scause() == LD_PAGE_FAULT) || (r_scause() == RW_PAGE_FAULT)) {
+    // Page fault detected for COW page. We need to kalloc() here
+    // The virtual address is provided in r_stval()
+    uint64 va = PGROUNDDOWN(r_stval());
+    uint64 pa;
+    uint flags;
+    pte_t* pte;
+    if((pte = walk(p->pagetable, va, 0)) == 0) {
+      printf("Page doesn't exist\n");
+      setkilled(p);
+      goto afterKilled;
+    }
+    // check whether this page is COW flagged and User accessible
+    if((*pte & PTE_V) && (*pte & PTE_U) && (*pte & PTE_RSW0)) {
+      // allocate physical page
+      flags = PTE_FLAGS(*pte);
+      flags |= PTE_W;
+      // Unmark COW flag
+      flags &= (~PTE_RSW0);
+      pa = PTE2PA(*pte);
+      char *mem;
+      if((mem = kalloc()) == 0) {
+        printf("trap: No memory Available for allocation\n");
+        setkilled(p);
+        goto afterKilled;
+      } 
+      uvmunmap(p->pagetable, va, 1, 0);
+      memmove(mem, (char*)pa, PGSIZE);
+      dec_kmemref((void*)pa);
+      if(mappages(p->pagetable, va, PGSIZE, (uint64)mem, flags) != 0) {
+        printf("trap: Page mapping Failed\n");
+        setkilled(p);
+        kfree(mem);
+        goto afterKilled;
+      }
+    }
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
@@ -73,6 +117,7 @@ usertrap(void)
     setkilled(p);
   }
 
+  afterKilled:
   if(killed(p))
     exit(-1);
 
@@ -149,6 +194,7 @@ kerneltrap()
     printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
     panic("kerneltrap");
   }
+  
 
   // give up the CPU if this is a timer interrupt.
   if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
diff --git a/kernel/vm.c b/kernel/vm.c
old mode 100644
new mode 100755
index 9f69783..70f1a0c
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -85,8 +85,10 @@ kvminithart()
 pte_t *
 walk(pagetable_t pagetable, uint64 va, int alloc)
 {
-  if(va >= MAXVA)
-    panic("walk");
+  if(va >= MAXVA) {
+    //panic("walk");
+    return 0;
+  }
 
   for(int level = 2; level > 0; level--) {
     pte_t *pte = &pagetable[PX(level, va)];
@@ -185,6 +187,7 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
       panic("uvmunmap: not a leaf");
     if(do_free){
       uint64 pa = PTE2PA(*pte);
+      // printf("uvm unmap: kfree\n");
       kfree((void*)pa);
     }
     *pte = 0;
@@ -240,6 +243,7 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
     }
     memset(mem, 0, PGSIZE);
     if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
+      // printf("UVM malloc: kfree\n");
       kfree(mem);
       uvmdealloc(pagetable, a, oldsz);
       return 0;
@@ -283,6 +287,7 @@ freewalk(pagetable_t pagetable)
       panic("freewalk: leaf");
     }
   }
+  // printf("vm.c : kfree\n");
   kfree((void*)pagetable);
 }
 
@@ -302,26 +307,67 @@ uvmfree(pagetable_t pagetable, uint64 sz)
 // physical memory.
 // returns 0 on success, -1 on failure.
 // frees any allocated pages on failure.
+// int
+// uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+// {
+//   pte_t *pte;
+//   uint64 pa, i;
+//   uint flags;
+//   char *mem;
+
+//   for(i = 0; i < sz; i += PGSIZE){
+//     if((pte = walk(old, i, 0)) == 0)
+//       panic("uvmcopy: pte should exist");
+//     if((*pte & PTE_V) == 0)
+//       panic("uvmcopy: page not present");
+//     pa = PTE2PA(*pte);
+//     flags = PTE_FLAGS(*pte);
+//     if((mem = kalloc()) == 0)
+//       goto err;
+//     memmove(mem, (char*)pa, PGSIZE);
+//     if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+//       kfree(mem);
+//       goto err;
+//     }
+//   }
+//   return 0;
+
+//  err:
+//   uvmunmap(new, 0, i / PGSIZE, 1);
+//   return -1;
+// }
+
 int
 uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 {
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  // char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+    // first clearing the page's WRITE flag
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
+    // Unmark the WRITE flag 
+    flags &= (~PTE_W);
+    // Mark the COW flag for child page
+    flags |= PTE_RSW0;
+    inc_kmemref((void*)pa);
+    // Mapping child page with new flags
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      // kfree(mem);
       goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    }
+    // unmap parent page without freeing the memory
+    uvmunmap(old, i, 1, 0);
+    // printf("---yo---\n");
+    // remap parent page with new flags
+    if(mappages(old, i, PGSIZE, (uint64)pa, flags) != 0){
       goto err;
     }
   }
@@ -348,16 +394,69 @@ uvmclear(pagetable_t pagetable, uint64 va)
 // Copy from kernel to user.
 // Copy len bytes from src to virtual address dstva in a given page table.
 // Return 0 on success, -1 on error.
+// int
+// copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
+// {
+//   uint64 n, va0, pa0;
+
+//   while(len > 0){
+//     va0 = PGROUNDDOWN(dstva);
+//     pa0 = walkaddr(pagetable, va0);
+//     if(pa0 == 0)
+//       return -1;
+//     n = PGSIZE - (dstva - va0);
+//     if(n > len)
+//       n = len;
+//     memmove((void *)(pa0 + (dstva - va0)), src, n);
+
+//     len -= n;
+//     src += n;
+//     dstva = va0 + PGSIZE;
+//   }
+//   return 0;
+// }
+
+
 int
 copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
+  pte_t* pte;
+  uint flags;
+  // printf("-------------\n");
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
-    pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
+    if(va0 > MAXVA) {
       return -1;
+    }
+    // pa0 = walkaddr(pagetable, va0);
+    pte = walk(pagetable, va0, 0);
+    if(pte == 0)
+      return -1;
+    if((*pte & PTE_V) && (*pte & PTE_U)) {
+      if(*pte & PTE_RSW0) {
+        flags = PTE_FLAGS(*pte);
+        flags |= PTE_W;
+        flags &= (~PTE_RSW0);
+        pa0 = PTE2PA(*pte);
+        char* mem;
+        if((mem = kalloc()) == 0) {
+          printf("copyout: No page available for kalloc.\n");
+          return -1;
+        }
+        uvmunmap(pagetable, va0, 1, 0);
+        memmove(mem, (char*)(pa0), PGSIZE);
+        dec_kmemref((void*)pa0);
+        if((mappages(pagetable, va0, PGSIZE, (uint64)mem, flags)) != 0) {
+          panic("copyout: unable to map page\n");
+        }
+      }
+    }
+    else {
+      return -1;
+    }
+    pa0 = walkaddr(pagetable, va0);
     n = PGSIZE - (dstva - va0);
     if(n > len)
       n = len;
diff --git a/user/test1.c b/user/test1.c
new file mode 100644
index 0000000..4c2f83a
--- /dev/null
+++ b/user/test1.c
@@ -0,0 +1,95 @@
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+void check_fork_page_fault() {
+    int pid;
+    char *arr = sbrk(4096 * 1);
+    *arr = 5;
+    if((pid = fork()) == 0) {
+        // child
+        *arr = 10;
+        printf("Child write successful %d\n", *arr);
+    }
+    else {
+        // parent
+        wait(0);
+        printf("parent has %d\n", *arr);
+    }
+    // exit(0);
+}
+
+void check_CoW_page_free() {
+    int pid;
+    char *arr = sbrk(4096 * 10);
+    *arr = 5;
+    print_cow_pages();
+    if((pid = fork()) == 0) {
+        // child
+        // *arr = 10;
+        // printf("Child write successful %d\n", *arr);
+        print_cow_pages();
+        char *temp;
+        for(int i=0;i<10;i++) {
+            temp = arr + i*4096;
+            *temp = 7;
+            print_cow_pages();
+        }
+        // exit(0);
+    }
+    else {
+        // parent
+        wait(0);
+        printf("parent has %d\n", *arr);
+        print_cow_pages();
+    }
+    // exit(0);
+}
+
+void check_file_io() {
+    printf("-------------FILE I/O-----------\n");
+    int file;
+    if((file = open("testfile.txt", O_CREATE | O_RDWR)) < 0) {
+        printf("File open Failed\n");
+    }
+    printf("File opened\n");
+
+    char *bf = "text before fork";
+    write(file, bf, strlen(bf));
+    close(file);
+    int pid;
+    if((pid = fork()) < 0) {
+        printf("Fork Failed\n");
+    }
+    else if (pid == 0) {
+        // child
+        bf = "text in child";
+        file = open("testfile.txt", O_RDWR);
+        write(file, bf, strlen(bf));
+        close(file);
+        // exit(0);
+    }
+    else {
+        // parent
+        wait(0);
+        file = open("testfile.txt", O_RDWR);
+        bf = "atlast text in parent";
+        write(file, bf, strlen(bf));
+        close(file);
+        printf("FILE I/O done. Exiting from parent\n");
+        char in[60];
+        file = open("testfile.txt", O_RDWR);
+        read(file, in, 59);
+        printf("%s\n", in);
+    }
+}
+
+int main() {
+    // check_fork_page_fault();
+    // check_CoW_page_free();
+    check_file_io();
+    return 0;
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..eda6844 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void print_cow_pages(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..991fefb 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("print_cow_pages");
